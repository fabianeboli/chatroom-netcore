{"version":3,"sources":["store/Login.ts","store/WeatherForecasts.ts","store/index.ts","store/Counter.ts","components/NavMenu.tsx","components/Layout.tsx","services/fetchService.ts","components/EditChatRoom/EditChatRoom.tsx","components/DeleteChatRoom/DeleteChatRoom.tsx","components/ChatRooms/ChatRoom/ChatRoom.tsx","components/ChatRooms/ChatRooms.tsx","services/helperFunctions.ts","components/SignIn/SignIn.tsx","components/SignUp/SignUp.tsx","components/NewChatRoom/NewChatRoom.tsx","components/Message/Message.tsx","components/Messages/Messages.tsx","components/NewMessage/NewMessage.tsx","MessageBoard/MessageBoard.tsx","App.tsx","registerServiceWorker.ts","index.tsx","store/configureStore.ts"],"names":["actTypes","unloadedState","forecasts","isLoading","storeLogin","login","type","SIGN_IN","initialState","id","localStorage","getItem","email","subscribedChatRooms","JSON","parse","token","username","reducers","counter","state","incomingAction","undefined","count","weatherForecasts","action","startDateIndex","setItem","SIGN_OUT","clear","NavMenu","useState","isOpen","setIsOpen","dispatch","useDispatch","loginInfo","useSelector","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","NavItem","NavLink","window","location","reload","Layout","React","render","this","props","children","Method","options","method","body","request","headers","stringify","user","a","fetch","POST","response","ok","json","statusText","signUp","getChats","chats","alert","newChatRoom","name","userId","console","log","status","editChatRoom","editedChatRoom","PUT","deleteChatRoom","DELETE","getMessages","chatRoomId","GET","newMessage","message","EditChatRoom","setName","modal","setModal","toggle","show","handleSubmit","event","preventDefault","fetchService","isChatRoomEdited","Button","color","Modal","ModalHeader","ModalBody","Input","placeholder","value","onChange","target","ModalFooter","DeleteChatRoom","isChatRoomDeleted","ChatRoom","Col","Card","CardBody","Number","ButtonGroup","ChatRooms","chatRooms","setChatRooms","useEffect","Row","map","emailValidation","test","toLowerCase","SignIn","error","setError","setEmail","password","setPassword","loginSelector","isEmailValid","isPasswordValid","length","LoginForm","err","Alert","Form","required","min","SignUp","setUsername","minLength","NewChatRoom","history","back","inline","FormGroup","row","Message","date","text","ListGroupItem","CardTitle","CardText","Messages","messages","setMessages","useParams","fetchMessages","setOfMessages","timer","setTimeout","clearTimeout","NewMessage","setNewMessage","InputGroup","InputGroupAddon","addonType","disabled","author","MessageBoard","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","baseUrl","document","getElementsByTagName","getAttribute","createBrowserHistory","basename","store","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","push","createStore","compose","applyMiddleware","configureStore","ReactDOM","App","getElementById","URL","process","toString","origin","addEventListener","contentType","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d7194751.chunk.js","sourcesContent":["import {ILoggedUser} from \"../Interfaces\";\n\nexport enum actTypes {\n    \"SIGN_IN\",\n    \"RETRIEVE\",\n    \"SIGN_OUT\"\n}\n\n//action creators\nexport interface ILogin {\n    type: actTypes;\n    username: string;\n    email: string;\n}\n\nexport interface ILogOut {\n    type: actTypes;\n}\n\nexport const storeLogin = (login: ILoggedUser) => {\n    return {\n        type: actTypes.SIGN_IN,\n        login\n    }\n}\n\nexport const deleteLogin = () => {\n    return {\n        type: actTypes.SIGN_OUT\n    }\n}\n\n//reducer\nconst initialState: ILoggedUser = {\n    id: localStorage.getItem(\"id\") || \"\",\n    email: localStorage.getItem(\"email\") || \"\",\n    subscribedChatRooms: localStorage.getItem(\"subscribedChatRooms\") && JSON.parse(localStorage.getItem(\"subscribedChatRooms\") as string) || \"\",\n    token: localStorage.getItem(\"token\") || \"\",\n    username: localStorage.getItem(\"username\") || \"\"\n};\n\nexport const reducer = (state = initialState, action: any) => {\n    switch (action.type) {\n        case actTypes.SIGN_IN:\n            localStorage.setItem(\"id\", action.login.id);\n            localStorage.setItem(\"email\", action.login.email);\n            localStorage.setItem(\"username\", action.login.username);\n            localStorage.setItem(\"subscribedChatRooms\", action.login.subscribedChatRooms);\n            localStorage.setItem(\"token\", action.login.token);\n            return {...action.login};\n        case actTypes.SIGN_OUT:\n            localStorage.clear();\n            return {...initialState};\n        default:\n            return state;\n    }\n}\n\n","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from './';\n\n// -----------------\n// STATE - This defines the type of data maintained in the Redux store.\n\nexport interface WeatherForecastsState {\n    isLoading: boolean;\n    startDateIndex?: number;\n    forecasts: WeatherForecast[];\n}\n\nexport interface WeatherForecast {\n    date: string;\n    temperatureC: number;\n    temperatureF: number;\n    summary: string;\n}\n\n// -----------------\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\n// They do not themselves have any side-effects; they just describe something that is going to happen.\n\ninterface RequestWeatherForecastsAction {\n    type: 'REQUEST_WEATHER_FORECASTS';\n    startDateIndex: number;\n}\n\ninterface ReceiveWeatherForecastsAction {\n    type: 'RECEIVE_WEATHER_FORECASTS';\n    startDateIndex: number;\n    forecasts: WeatherForecast[];\n}\n\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\n// declared type strings (and not any other arbitrary string).\ntype KnownAction = RequestWeatherForecastsAction | ReceiveWeatherForecastsAction;\n\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\n\nexport const actionCreators = {\n    requestWeatherForecasts: (startDateIndex: number): AppThunkAction<KnownAction> => (dispatch, getState) => {\n        // Only load data if it's something we don't already have (and are not already loading)\n        const appState = getState();\n        if (appState && appState.weatherForecasts && startDateIndex !== appState.weatherForecasts.startDateIndex) {\n            fetch(`weatherforecast`)\n                .then(response => response.json() as Promise<WeatherForecast[]>)\n                .then(data => {\n                    dispatch({ type: 'RECEIVE_WEATHER_FORECASTS', startDateIndex: startDateIndex, forecasts: data });\n                });\n\n            dispatch({ type: 'REQUEST_WEATHER_FORECASTS', startDateIndex: startDateIndex });\n        }\n    }\n};\n\n// ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nconst unloadedState: WeatherForecastsState = { forecasts: [], isLoading: false };\n\nexport const reducer: Reducer<WeatherForecastsState> = (state: WeatherForecastsState | undefined, incomingAction: Action): WeatherForecastsState => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'REQUEST_WEATHER_FORECASTS':\n            return {\n                startDateIndex: action.startDateIndex,\n                forecasts: state.forecasts,\n                isLoading: true\n            };\n        case 'RECEIVE_WEATHER_FORECASTS':\n            // Only accept the incoming data if it matches the most recent request. This ensures we correctly\n            // handle out-of-order responses.\n            if (action.startDateIndex === state.startDateIndex) {\n                return {\n                    startDateIndex: action.startDateIndex,\n                    forecasts: action.forecasts,\n                    isLoading: false\n                };\n            }\n            break;\n    }\n\n    return state;\n};\n","import * as WeatherForecasts from './WeatherForecasts';\nimport * as Counter from './Counter';\nimport * as Login from './Login';\n\n// The top-level state object\nexport interface ApplicationState {\n    counter: Counter.CounterState | undefined;\n    weatherForecasts: WeatherForecasts.WeatherForecastsState | undefined;\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property using\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\n// acts on the corresponding ApplicationState property type.\nexport const reducers = {\n    counter: Counter.reducer,\n    weatherForecasts: WeatherForecasts.reducer,\n    login: Login.reducer\n};\n\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\n// correctly typed to match your store.\nexport interface AppThunkAction<TAction> {\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\n}\n","import { Action, Reducer } from 'redux';\n\n// -----------------\n// STATE - This defines the type of data maintained in the Redux store.\n\nexport interface CounterState {\n    count: number;\n}\n\n// -----------------\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\n// They do not themselves have any side-effects; they just describe something that is going to happen.\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\n\nexport interface IncrementCountAction { type: 'INCREMENT_COUNT' }\nexport interface DecrementCountAction { type: 'DECREMENT_COUNT' }\n\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\n// declared type strings (and not any other arbitrary string).\nexport type KnownAction = IncrementCountAction | DecrementCountAction;\n\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\n\nexport const actionCreators = {\n    increment: () => ({ type: 'INCREMENT_COUNT' } as IncrementCountAction),\n    decrement: () => ({ type: 'DECREMENT_COUNT' } as DecrementCountAction)\n};\n\n// ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nexport const reducer: Reducer<CounterState> = (state: CounterState | undefined, incomingAction: Action): CounterState => {\n    if (state === undefined) {\n        return { count: 0 };\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'INCREMENT_COUNT':\n            return { count: state.count + 1 };\n        case 'DECREMENT_COUNT':\n            return { count: state.count - 1 };\n        default:\n            return state;\n    }\n};\n","import * as React from 'react';\nimport {Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink} from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport './NavMenu.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {deleteLogin} from \"../store/Login\";\nimport {useState} from \"react\";\nimport {IReducer} from \"../Interfaces\";\n\nconst NavMenu = () => {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const dispatch = useDispatch();\n    const loginInfo = useSelector((state: IReducer) => state.login);\n\n    const toggle = () => setIsOpen(!isOpen);\n\n    return (\n        <header>\n            <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3\" light>\n                <Container>\n                    <NavbarBrand tag={Link} to=\"/\">ChatApp</NavbarBrand>\n                    {loginInfo.token && <span className=\"text-muted\"> Welcome, {loginInfo.username} </span>}\n                    <NavbarToggler onClick={toggle} className=\"mr-2\"/>\n                    <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={isOpen} navbar>\n                        <ul className=\"navbar-nav flex-grow\">\n                            {loginInfo.token ? (\n                                <>\n                                    <NavItem>\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\n                                    </NavItem>\n                                    \n                                    <NavItem>\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/newchatroom\">New Chat\n                                            room</NavLink>\n                                    </NavItem>\n                                    <NavItem>\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/\"\n                                                 onClick={() => dispatch(deleteLogin()) && window.location.reload()}> Sign\n                                            Out </NavLink>\n                                    </NavItem>\n                                </>\n                            ) : (\n                                <>\n                                    <NavItem>\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/signin\">Sign in</NavLink>\n                                    </NavItem>\n\n                                    <NavItem>\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/signup\">Sign up</NavLink>\n                                    </NavItem>\n                                </>\n                            )}\n\n                        </ul>\n                    </Collapse>\n                </Container>\n            </Navbar>\n        </header>\n    );\n}\nexport default NavMenu;\n","import * as React from 'react';\nimport { Container } from 'reactstrap';\nimport NavMenu from './NavMenu';\n\nexport default class Layout extends React.PureComponent<{}, { children?: React.ReactNode }> {\n    public render() {\n        return (\n            <React.Fragment>\n                <NavMenu />\n                <Container>\n                    {this.props.children}\n                </Container>\n            </React.Fragment>\n        );\n    }\n}","import {IChatRoom, ILogin, INewMessage, INewUser} from \"../Interfaces\";\n\nconst chatController = \"api/chatroom\";\nconst userController = \"api/user\";\nconst loginUrl = \"api/user/login\";\n\nenum Method {\n    GET = \"GET\",\n    POST = \"POST\",\n    PUT = \"PUT\",\n    DELETE = \"DELETE\"\n}\n\nconst options = (method: Method, body: any = \"\", token: string = \"\") => {\n    const request = {\n        method,\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8',\n            'Authorization': `bearer ${token}`\n        }\n    };\n\n    return body ? {\n        ...request,\n        body: JSON.stringify(body),\n    } : {\n        ...request\n    };\n\n}\n\n// user\nconst login = async (user: ILogin) => {\n    const response = await fetch(loginUrl, options(Method.POST, user));\n    return response.ok ? await response.json() : response.statusText;\n}\n\nconst signUp = async (user: INewUser) => {\n    const response = await fetch(userController, options(Method.POST, user));\n    return response.ok;\n};\n\n// ChatRoom\nconst getChats = async () => {\n    const chats = await fetch(chatController);\n    return chats.ok ? await chats.json() : alert(\"No chats found\");\n}\n\nconst newChatRoom = async (name: string, userId: string, token: string) => {\n    const response = await fetch(chatController, options(Method.POST, {name, userId}, token));\n    if (!response.ok) console.log(`Error: ${response.status}`);\n    return response.ok;\n}\n\nconst editChatRoom = async (editedChatRoom: IChatRoom, token: string) => {\n    const response = await fetch(`${chatController}/${editedChatRoom.id}`, options(Method.PUT, editedChatRoom, token));\n    if (!response.ok) console.log(`Error: ${response.status}`);\n    return response.ok;\n}\n\nconst deleteChatRoom = async (id: string, userId: string, token: string) => {\n    const response = await fetch(`${chatController}/${id}`, options(Method.DELETE, userId, token));\n    return response.ok;\n}\n\n// messages\nconst getMessages = async (chatRoomId: string, token: string): Promise<any[]> => {\n    const response = await fetch(`${chatController}/${chatRoomId}/message`, options(Method.GET, \"\", token));\n    return response.ok ? response.json() : [];\n}\n\nconst newMessage = async (chatRoomId: string, message: INewMessage, token: string) => {\n    const response = await fetch(`${chatController}/${chatRoomId}/message`, options(Method.POST, message, token))\n    return response.ok;\n}\n\n//subscriptions \n\n\n\nexport default {\n    getChats,\n    login,\n    signUp,\n    newChatRoom,\n    editChatRoom,\n    deleteChatRoom,\n    getMessages,\n    newMessage\n};","import React, {useState} from 'react';\nimport {useSelector} from \"react-redux\";\nimport fetchService from \"../../services/fetchService\";\nimport {IChatRoom} from \"../../Interfaces\";\nimport {Button, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\n\ninterface IEditChatRoom {\n    id: string;\n}\n\nconst EditChatRoom = ({id} : IEditChatRoom) => {\n    const [name, setName] = useState<string>(\"\");\n    const [modal, setModal] = useState<boolean>(false);\n    const loginInfo = useSelector((state: any) => state.login);\n\n    const toggle = () => setModal(show => !show);\n\n    const handleSubmit = async (event: any) => {\n        event.preventDefault();\n        const editedChatRoom: IChatRoom = {id: id!, name, userId: loginInfo.id}\n        const isChatRoomEdited = await fetchService.editChatRoom(editedChatRoom, loginInfo.token);\n        console.log(isChatRoomEdited);\n        toggle();\n        window.location.reload();\n    }\n\n    return (\n        <>\n            <Button color=\"warning\" onClick={toggle}>\n                Edit\n            </Button>\n\n            <Modal isOpen={modal} toggle={toggle}>\n                <ModalHeader toggle={toggle}>\n                    Edit ChatRoom\n                </ModalHeader>\n                <ModalBody>\n                    <Input className=\"text-center\" type=\"text\" name=\"name\" placeholder=\"name\" value={name}\n                           onChange={({target}) => setName(target.value)}/>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"warning\" type=\"submit\" onClick={handleSubmit}>Edit Chatroom</Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    )\n};\n\nexport default EditChatRoom;\n","import React, {useState} from 'react';\nimport {useSelector} from \"react-redux\";\nimport fetchService from \"../../services/fetchService\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\n\ninterface IDeleteChatRoom {\n    id: string;\n}\n\nconst DeleteChatRoom = ({id}: IDeleteChatRoom) => {\n    const [name, setName] = useState<string>(\"\");\n    const loginInfo = useSelector((state: any) => state.login);\n    const [modal, setModal] = useState<boolean>(false);\n    \n    const toggle = () => setModal(show => !show);\n\n    const handleSubmit = async (event: any) => {\n        event.preventDefault();\n        const isChatRoomDeleted = await fetchService.deleteChatRoom(id!, loginInfo.id, loginInfo.token);\n        console.log(isChatRoomDeleted);\n        isChatRoomDeleted && window.location.reload();\n    }\n\n    return (\n        <>\n            <Button color=\"danger\" onClick={toggle}>\n               Delete \n            </Button>\n\n            <Modal isOpen={modal} toggle={toggle}>\n                <ModalHeader toggle={toggle}>\n                    Delete ChatRoom\n                </ModalHeader>\n             \n                <ModalBody>\n                    <Button color=\"danger\" type=\"submit\" onClick={handleSubmit}>Delete Chatroom</Button>\n                </ModalBody>\n            </Modal>\n        </>\n    )\n};\n\nexport default DeleteChatRoom;\n","import React from 'react';\nimport {IChatRoom} from \"../../../Interfaces\";\nimport {Link} from \"react-router-dom\";\nimport {useSelector} from \"react-redux\";\nimport {Button, ButtonGroup, Card, CardBody, Col} from \"reactstrap\";\nimport EditChatRoom from \"../../EditChatRoom/EditChatRoom\";\nimport DeleteChatRoom from \"../../DeleteChatRoom/DeleteChatRoom\";\n\n\nconst ChatRoom = ({name, id, userId}: IChatRoom) => {\n    const loginInfo = useSelector((state: any) => state.login);\n    console.log(userId, loginInfo.id, loginInfo.id == userId);\n\n    return (\n        <Col className=\"my-2\">\n            <Card>\n                <CardBody className=\"shadow-sm text-center\">\n                    <h4>#{id}</h4>\n                    <h4>{name}</h4>\n                    <div className=\"flex row justify-content-around my-2\">\n                        {loginInfo.id && (\n                            <Link to={`${id}`}>\n                                <Button color=\"primary\" className=\"my-auto\">Go to chatroom</Button>\n                            </Link>\n                        )}\n\n                        {Number(loginInfo.id) === userId && (\n                            <>\n                                <ButtonGroup>\n                                    <EditChatRoom id={id}/>\n                                    <DeleteChatRoom id={id}/>\n                                </ButtonGroup>\n                            </>\n                        )}\n                    </div>\n                </CardBody>\n            </Card>\n\n        </Col>\n    );\n};\n\nexport default ChatRoom;\n","import React, {useEffect, useState} from 'react';\nimport {IChatRoom} from \"../../Interfaces\";\nimport ChatRoom from \"./ChatRoom/ChatRoom\";\nimport fetchService from \"../../services/fetchService\";\nimport {Container, Row} from \"reactstrap\";\n\nconst ChatRooms = () => {\n    const [chatRooms, setChatRooms] = useState<IChatRoom[]>([]);\n\n    useEffect(() => {\n        const fetch = async () => {\n            setChatRooms(await fetchService.getChats());\n        }\n        fetch();\n    }, []);\n\n\n    return (\n            <Container>\n                <h1 className=\"text-center\">Chat Rooms</h1>\n                <Row className=\"row-cols-1 row-cols-sm-2 row-cols-md-3\">\n                    {chatRooms.map(({name, id, userId}) => (\n                        <>\n                            <ChatRoom name={name} id={id} userId={userId}/>\n                        </>\n                    ))}\n                </Row>\n            </Container>\n    );\n};\n\nexport default ChatRooms;\n","\nexport const emailValidation = (email: string) => {\n    const emailPattern: RegExp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const isEmailValid: boolean = emailPattern.test(email.toLowerCase());\n    return isEmailValid;\n};","import React, {useState} from 'react';\nimport fetchService from \"../../services/fetchService\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {storeLogin} from \"../../store/Login\";\nimport {emailValidation} from \"../../services/helperFunctions\";\nimport {Redirect} from \"react-router\";\nimport {Alert, Button, Card, CardBody, Container, Form, Input} from \"reactstrap\";\n\ntype MouseEvent = React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>;\n\n\nconst SignIn = () => {\n    const [error, setError] = useState<string[]>([]);\n    const [email, setEmail] = useState<string>(\"test@test.com\");\n    const [password, setPassword] = useState<string>(\"Ewqewqeads\");\n    const dispatch = useDispatch();\n    const loginSelector = useSelector((state: any) => state.login);\n\n    const handleSubmit = async (event: MouseEvent) => {\n        event.preventDefault();\n        setError([]);\n        const isEmailValid = emailValidation(email);\n        const isPasswordValid: boolean = password.length >= 6;\n\n        if (isEmailValid && isPasswordValid) {\n            const login = await fetchService.login({email, password});\n            if (!login) setError(error => [...error, \"Wrong credentials\"]);\n            dispatch(storeLogin(login));\n        }\n\n        !isEmailValid && setError(error => [...error, \"Invalid Email\"]);\n        !isPasswordValid && setError(error => [...error, \"Invalid Password\"]);\n        setEmail(\"\");\n        setPassword(\"\");\n    }\n\n    const LoginForm: JSX.Element = (\n        <Container className=\"flex\">\n            {error.map(err => (\n                <Alert color=\"danger\">\n                    <li>{err}</li>\n                </Alert>\n            ))}\n            <CardBody>\n                <Form className=\"input-group\">\n                    <Input className=\"form-control\" type=\"text\" name=\"email\" placeholder=\"email\" required value={email}\n                           onChange={({target}) => setEmail(target.value)}/>\n\n                    <Input className=\"form-control\" type=\"password\" name=\"password\" placeholder=\"password\" min={6}\n                           required value={password}\n                           onChange={({target}) => setPassword(target.value)}/>\n                </Form>\n            </CardBody>\n        </Container>\n    )\n\n    return (\n        <Card className=\"mx-auto flex justify-content-center\">\n            <h3 className=\"text-center my-2 py-2 border-bottom text-secondary\">Sign in</h3>\n            {loginSelector.token ? <Redirect to=\"/\"/> : LoginForm}\n            <Button color=\"primary\" type=\"submit\" className=\"w-75 align-self-center my-2\"\n                    onClick={(event) => handleSubmit(event)}>Sign in</Button>\n        </Card>\n\n    );\n};\n\nexport default SignIn;\n","import React, {useState} from 'react';\nimport {emailValidation} from \"../../services/helperFunctions\";\nimport fetchService from \"../../services/fetchService\";\nimport {useDispatch} from \"react-redux\";\nimport {storeLogin} from \"../../store/Login\";\nimport {ILoggedUser} from '../../Interfaces';\nimport {Alert, Button, Card, CardBody, CardHeader, Container, Form, Input} from \"reactstrap\";\n\ntype MouseEvent = React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>;\n\nconst SignUp = () => {\n        const [error, setError] = useState<string[]>([]);\n        const [username, setUsername] = useState<string>(\"\");\n        const [email, setEmail] = useState<string>(\"\");\n        const [password, setPassword] = useState<string>(\"\");\n        const dispatch = useDispatch()\n\n        const handleSubmit = async (event: MouseEvent) => {\n            event.preventDefault();\n            setError([]);\n            const isEmailValid = emailValidation(email);\n            const isPasswordValid = password.length >= 6;\n\n            if (!isPasswordValid) {\n                setError(error => [...error, \"Invalid Password\"]);\n                return;\n            }\n\n            if (isEmailValid) {\n                const isSignUpSuccessful = await fetchService.signUp({username, email, password});\n                if (isSignUpSuccessful) {\n                    alert(\"New account created\");\n                    dispatch(storeLogin(await fetchService.login({email, password})));\n                    window.location.reload();\n                } else {\n                    setError(error => [...error, \"User already exists\"]);\n                }\n            } else {\n                setError(error => [...error, \"Invalid email format\"]);\n            }\n\n            setEmail(\"\");\n            setUsername(\"\");\n            setPassword(\"\");\n        }\n\n        return (\n            <Container className=\"flex\">\n                <Card>\n                <h3 className=\"text-center my-2 py-2 border-bottom text-secondary\">Sign up</h3> \n                    {error.map(err => (\n                        <Alert color=\"danger\">\n                            <li>{err}</li>\n                        </Alert>\n                    ))}\n                    <CardBody>\n                        <Form className=\"input-group\">\n                            <input className=\"form-control\" type=\"text\" name=\"username\" placeholder=\"username\"\n                                   value={username}\n                                   onChange={({target}) => setUsername(target.value)}/>\n                            <input className=\"form-control\" type=\"text\" name=\"email\" placeholder=\"email\" value={email}\n                                   onChange={({target}) => setEmail(target.value)}/>\n                            <input className=\"form-control\" type=\"password\" name=\"password\" placeholder=\"password\"\n                                   value={password} minLength={6}\n                                   onChange={({target}) => setPassword(target.value)}/>\n                        </Form>\n                    </CardBody>\n                    <Button color=\"primary\" type=\"submit\" className=\"w-75 align-self-center my-2\"\n                            onClick={(event) => handleSubmit(event)}>Sign in</Button>\n                </Card>\n            </Container>\n\n        );\n    }\n;\n\nexport default SignUp;\n","import React, {useState} from 'react';\nimport fetchService from \"../../services/fetchService\";\nimport {useSelector} from \"react-redux\";\nimport {Container, Form, FormGroup, Input} from \"reactstrap\";\n\nconst NewChatRoom = () => {\n    const [name, setName] = useState<string>(\"\");\n    const loginInfo = useSelector((state: any) => state.login);\n\n    const handleSubmit = async (event: any) => {\n        event.preventDefault();\n        const isChatRoomAdded = await fetchService.newChatRoom(name, loginInfo.id, loginInfo.token);\n        isChatRoomAdded && window.history.back();\n    }\n\n    return (\n        <Container className=\"mx-auto col-lg-8 col-md-6\">\n            <h1 className=\"text-center\">Create New Chat Room</h1>\n            <Form inline className=\"flex justify-content-center\">\n                <FormGroup row>\n                    <Input className=\"text-center my-2 mx-auto\" type=\"text\"\n                           name=\"name\" placeholder=\"name\" value={name}\n                           onChange={({target}) => setName(target.value)}/>\n                    <button className=\"btn btn-primary px-2 mx-1\" type=\"submit\" onClick={handleSubmit}>Add Chatroom\n                    </button>\n                </FormGroup>\n\n            </Form>\n        </Container>\n    )\n}\n\nexport default NewChatRoom;\n","import React from 'react';\nimport {IMessage} from \"../../Interfaces\";\nimport {CardBody, CardText, CardTitle, ListGroupItem} from \"reactstrap\";\n\nconst Message = ({username, date, text}: IMessage) => {\n\n    return (\n        <ListGroupItem>\n            <CardTitle>\n                <h5>Username: {username}</h5>\n                <h6>{date}</h6>\n            </CardTitle>\n\n            <CardBody>\n                <CardText>{text}</CardText>\n            </CardBody>\n        </ListGroupItem>\n    );\n};\n\nexport default Message;\n","import React, {useEffect, useState} from 'react';\nimport {IMessage} from \"../../Interfaces\";\nimport Message from \"../Message/Message\";\nimport {useParams} from \"react-router\";\nimport fetchService from \"../../services/fetchService\";\nimport {useSelector} from \"react-redux\";\nimport {Container} from \"reactstrap\";\n\nconst Messages = () => {\n    const [messages, setMessages] = useState<IMessage[]>([]);\n    const {id} = useParams();\n    const loginInfo = useSelector((state: any) => state.login);\n    useEffect(() => {\n        const fetchMessages = async () => {\n            if (id === undefined) return;\n            const setOfMessages = await fetchService.getMessages(id, loginInfo.token);\n            setMessages(messages => [messages, ...setOfMessages]);\n        }\n        const timer = setTimeout(() => {\n            fetchMessages();\n        }, 300);\n\n        return () => clearTimeout(timer);\n    },);\n\n\n    return (\n        <Container>\n            {messages && messages.map(({username, date, text}) => (\n                <div>\n                {text && (<Message username={username} date={date} text={text}/>)}\n                </div>\n            ))}\n        </Container>\n    );\n};\n\nexport default Messages;\n","import React, {useState} from 'react';\nimport fetchService from \"../../services/fetchService\";\nimport {useParams} from \"react-router\";\nimport {INewMessage} from \"../../Interfaces\";\nimport {useSelector} from \"react-redux\";\nimport {Button, Container, Form, Input, InputGroup, InputGroupAddon} from \"reactstrap\";\n\nconst NewMessage = () => {\n    const [newMessage, setNewMessage] = useState<string>(\"\");\n    const {id} = useParams();\n    const loginInfo = useSelector((state: any) => state.login);\n    const handleSubmit = (event: any) => {\n        event.preventDefault();\n        const message: INewMessage = {\n            author: loginInfo.name,\n            text: newMessage,\n            userId: loginInfo.id\n        }\n\n        id && fetchService.newMessage(id, message, loginInfo.token);\n\n        setNewMessage(\"\");\n    }\n\n    return (\n        <Container>\n            <Form>\n                <InputGroup className=\"py-2 my-2\">\n                    <Input type=\"text\"\n                           value={newMessage}\n                           onChange={({target}) => setNewMessage(target.value)}/>\n\n                    <InputGroupAddon addonType=\"append\">\n                        <Button color=\"primary\" type=\"submit\" disabled={newMessage.length == 0} onClick={handleSubmit}>\n                            Submit\n                        </Button>\n                    </InputGroupAddon>\n                </InputGroup>\n\n            </Form>\n\n        </Container>\n    );\n};\n\nexport default NewMessage;\n","import React from 'react';\nimport Messages from \"../components/Messages/Messages\";\nimport NewMessage from \"../components/NewMessage/NewMessage\";\n\nconst MessageBoard = () => {\n    return (\n        <div>\n           <Messages />\n           <NewMessage/>\n        </div>\n    );\n};\n\nexport default MessageBoard;\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router';\nimport Layout from './components/Layout';\nimport Counter from './components/Counter';\nimport FetchData from './components/FetchData';\n\nimport './custom.css'\nimport ChatRooms from \"./components/ChatRooms/ChatRooms\";\nimport SignIn from \"./components/SignIn/SignIn\";\nimport SignUp from \"./components/SignUp/SignUp\";\nimport NewChatRoom from \"./components/NewChatRoom/NewChatRoom\";\nimport EditChatRoom from \"./components/EditChatRoom/EditChatRoom\";\nimport DeleteChatRoom from \"./components/DeleteChatRoom/DeleteChatRoom\";\nimport MessageBoard from \"./MessageBoard/MessageBoard\";\n\nexport default () => {\n\n    return (\n        <Layout>\n                {localStorage.getItem(\"token\") ? (\n                    <Switch>\n                        <Route exact path=\"/newchatroom\" component={NewChatRoom}/>\n                        <Route exact path=\"/:id/edit\" component={EditChatRoom}/>\n                        <Route exact path=\"/:id/delete\" component={DeleteChatRoom}/>\n                        <Route exact path=\"/:id\" component={MessageBoard}/>\n                    </Switch>\n                ) : (\n                    <>\n                        <Route exact path=\"/signin\" component={SignIn}/>\n                        <Route exact path=\"/signup\" component={SignUp}/>\n                    </>\n                )}\n                <Route exact path='/' component={ChatRooms}/>\n                <Redirect to=\"/\"/>\n\n\n        </Layout>\n    )\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const url = process.env.PUBLIC_URL as string;\n        const publicUrl = new URL(url, window.location.toString());\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing as ServiceWorker;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport configureStore from './store/configureStore';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n// Create browser history to use in the Redux store\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\nconst history = createBrowserHistory({ basename: baseUrl });\n\n// Get the application-wide store instance, prepopulating with state from the server where available.\nconst store = configureStore(history);\n\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <App />\n        </ConnectedRouter>\n    </Provider>,\n    document.getElementById('root'));\n\nregisterServiceWorker();\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { History } from 'history';\nimport { ApplicationState, reducers } from './';\n\nexport default function configureStore(history: History, initialState?: ApplicationState) {\n    const middleware = [\n        thunk,\n        routerMiddleware(history)\n    ];\n\n    const rootReducer = combineReducers({\n        ...reducers,\n        router: connectRouter(history)\n    });\n\n    const enhancers = [];\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\n    }\n\n    return createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware), ...enhancers)\n    );\n}\n"],"sourceRoot":""}